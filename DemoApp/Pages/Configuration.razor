@page "/configuration"

@inject AppointmentService AppointmentService

<MudCard Class="mb-3">
    <MudCardHeader>
        <MudText Typo="Typo.h6">Config</MudText>
    </MudCardHeader>
    <MudCardContent>
        <MudGrid>
            <MudItem xs="12" md="6">
                <MudCheckBox @bind-Checked="_enableDragging" Label="Enable Dragging" />
            </MudItem>
            <MudItem xs="12" md="6">
                <MudCheckBox @bind-Checked="_enableRescheduling" Label="Enable Rescheduling" />
            </MudItem>
            <MudItem xs="12" md="6">
                <MudCheckBox @bind-Checked="_alwaysShowYear" Label="Always show year in header" />
            </MudItem>
            <MudItem xs="12" md="6">
                <MudNumericField @bind-Value="_maxVisibleAppointmentsPerDay" Label="Max Visible Appointments Per Day" Step="1" Min="1" Max="5" />
            </MudItem>
            <MudItem xs="12" md="6">
                <MudColorPicker Label="Theme Color" @bind-Text="_themeColor" Style="@($"color: {_themeColor};")" />
            </MudItem>
            <MudItem xs="12" md="6">
                <MudSelect Label="Start Day of Week" @bind-Value="_startDayOfWeek">
                    @foreach (var day in Enum.GetValues<DayOfWeek>())
                    {
                        <MudSelectItem Value="@day" />
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="12" md="6">
                <MudTextField @bind-Value="_plusOthersText" Label="Overflow text" />
            </MudItem>
            <MudItem xs="12" md="6">
                <MudTextField @bind-Value="_todayButtonText" Label="Today Button Text" />
            </MudItem>
            <MudItem xs="12" md="6">
                <MudButton OnClick="AddAppointments" Variant="Variant.Filled" Color="Color.Primary">Add appointments</MudButton>
                <MudButton OnClick="ClearAppointments" Variant="Variant.Filled" Color="Color.Error">Clear appointments</MudButton>
            </MudItem>
        </MudGrid>
    </MudCardContent>
</MudCard>

<Scheduler
    @ref="_scheduler"
    OnAddingNewAppointment="OnAddingNewAppointment"
    AlwaysShowYear="_alwaysShowYear"
    MaxVisibleAppointmentsPerDay="_maxVisibleAppointmentsPerDay"
    EnableDragging="_enableDragging"
    EnableRescheduling="_enableRescheduling"
    ThemeColor="@_themeColor"
    StartDayOfWeek="_startDayOfWeek"
    TodayButtonText="@_todayButtonText"
    PlusOthersText="@_plusOthersText">
    <Appointments>
        @foreach (var app in _appointments)
        {
            <Appointment Start="@app.Start" End="@app.End" Color="@app.Color" OnReschedule="(start, end) => HandleReschedule(app, start, end)">
                @app.Title
            </Appointment>
        }
    </Appointments>
</Scheduler>

@code {
    private List<AppointmentDto> _appointments = new();

    private Scheduler _scheduler;

    private bool _alwaysShowYear = true;
    private int _maxVisibleAppointmentsPerDay = 5;
    private bool _enableDragging = true;
    private bool _enableRescheduling = false;
    private string _themeColor = "aqua";
    private DayOfWeek _startDayOfWeek = DayOfWeek.Sunday;
    private string _todayButtonText = "Today";
    private string _plusOthersText = "+ {n} others";

    Task OnAddingNewAppointment(DateTime start, DateTime end)
    {
        _appointments.Add(new AppointmentDto { Start = start, End = end, Title = "A newly added appointment!", Color = "aqua" });
        return Task.CompletedTask;
    }

    Task HandleReschedule(AppointmentDto appointment, DateTime newStart, DateTime newEnd)
    {
        appointment.Start = newStart;
        appointment.End = newEnd;

        return Task.CompletedTask;
    }

    void AddAppointments()
    {
        var newAppointments = AppointmentService.GetAppointments(_scheduler.CurrentRange.Start, _scheduler.CurrentRange.End);
        _appointments.AddRange(newAppointments);
    }

    void ClearAppointments()
    {
        _appointments.Clear();
    }
}
