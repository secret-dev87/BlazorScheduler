@page "/"
@using BlazorScheduler
@using System.Drawing

<Scheduler
    T="Appointment"
    Appointments="Appointments"
    OnAddingNewAppointment="OnAddNewAppointment"
    OnAppointmentClick="OnAppointmentClick"
    OnOverflowAppointmentClick="OnOverflowAppointmentClick"
    ThemeColor="Color.Aqua"
/>

@if (SelectedAppointment is not null)
{
    <div id="overlay" @onclick="CloseAppointment">
        <div class="appointment-popup" style="left: @(PopupX)px; top: @(PopupY)px;" @onclick:stopPropagation="true">
            <label>Title: </label><input type="text" @bind-value="SelectedAppointmentCopy.Title" /><br />
            <label>Start: </label><input type="date" @bind-value="SelectedAppointmentCopy.Start" /><br />
            <label>End: </label><input type="date" @bind-value="SelectedAppointmentCopy.End" /><br />
            <label>Color: </label><input type="text" @bind-value="AppointmentColor" /><br />

            <button @onclick="CloseAppointment">Close</button>
            <button @onclick="SaveAppointment">Save</button>
        </div>
    </div>
}

@code {
    private List<Appointment> Appointments = new();
    private Appointment SelectedAppointment;
    private Appointment SelectedAppointmentCopy;
    private double PopupX, PopupY;
    private string AppointmentColor
    {
        get => SelectedAppointmentCopy.Color.Name;
        set => SelectedAppointmentCopy.Color = Color.FromName(value);
    }

    protected override void OnInitialized()
    {
        Appointments.ForEach(x =>
        {
            x.Color = RandomColor(new Random(x.GetHashCode()));
        });
        base.OnInitialized();
    }

    private async Task EditAppointment(Appointment appointment)
    {
        SelectedAppointment = appointment;
        SelectedAppointmentCopy = SelectedAppointment.Copy();
        StateHasChanged();
        while (SelectedAppointment is not null)
        {
            await Task.Delay(50);
        }
    }

    private void CloseAppointment()
    {
        SelectedAppointment = SelectedAppointmentCopy = null;
        StateHasChanged();
    }
    private void SaveAppointment()
    {
        SelectedAppointment.Title = SelectedAppointmentCopy.Title;
        SelectedAppointment.Start = SelectedAppointmentCopy.Start;
        SelectedAppointment.End = SelectedAppointmentCopy.End;
        SelectedAppointment.Color = SelectedAppointmentCopy.Color;
        CloseAppointment();
    }

    private async Task OnAddNewAppointment(Appointment appointment)
    {
        // set the popup x&y here somehow - still not saving for some reason
        await EditAppointment(appointment);
        Appointments.Add(appointment);
    }
    private async Task OnAppointmentClick(Appointment appointment, MouseEventArgs mouse)
    {
        (PopupX, PopupY) = (mouse.ClientX, mouse.ClientY);
        await EditAppointment(appointment);
    }
    private async Task OnOverflowAppointmentClick(IEnumerable<Appointment> appointments, MouseEventArgs mouse)
    {
        
    }

    private Color RandomColor(Random r)
    {
        return Color.FromArgb(r.Next(0, 255), r.Next(0, 255), r.Next(0, 255));
    }
    private string ToRgbString(Color color)
    {
        return $"rgb({color.R}, {color.G}, {color.B})";
    }

    private class Appointment : IAppointment
    {
        public string Title { get; set; }
		public DateTime Start { get; set; }
		public DateTime End { get; set; }
		public Color Color { get; set; }

        public Appointment Copy() => this.MemberwiseClone() as Appointment;
    }
}
