@page "/"
@using BlazorScheduler
@using System.Drawing

<Scheduler
    T="Appointment"
    Appointments="Appointments"
    OnAddingNewAppointment="OnAddNewAppointment"
    OnAppointmentClick="OnAppointmentClick"
    OnOverflowAppointmentClick="OnOverflowAppointmentClick"
    ThemeColor="Color.Aqua"
/>

@if (SelectedAppointment is not null)
{
    <div id="overlay" @onclick="CloseAppointment">
        <div class="popup" style="left: @(PopupX); top: @(PopupY);" @onclick:stopPropagation="true">
            <label>Title: </label><input type="text" @bind-value="SelectedAppointmentCopy.Title" /><br />
            <label>Start: </label><input type="text" @bind-value="SelectedAppointmentCopy.Start" /><br />
            <label>End: </label><input type="text" @bind-value="SelectedAppointmentCopy.End" /><br />
            <label>Color: </label><input type="text" @bind-value="AppointmentColor" /><br />

            @if (EnableDelete)
            {
                <button stlye="margin-right: 5px;" @onclick="DeleteAppointment">Delete</button>
            }
            <button @onclick="SaveAppointment">Save</button>
        </div>
    </div>
}

@if (SelectedAppointments is not null)
{
    <div id="overlay" @onclick="() => SelectedAppointments = null">
        <div class="popup" style="left: @(PopupX); top: @(PopupY);" @onclick:stopPropagation="true">
            <ul>
            @foreach (var appointment in SelectedAppointments)
            {
                <li style="--dot-color: @ToRgbString(appointment.Color)">@appointment.Title: @appointment.Start.ToShortDateString() to @appointment.End.ToShortDateString()</li>
            }
            </ul>
        </div>
    </div>
}

@code {
    private List<Appointment> Appointments = new();

    private Appointment SelectedAppointment;
    private Appointment SelectedAppointmentCopy;
    private bool EnableDelete;
    private string PopupX, PopupY;
    private string AppointmentColor
    {
        get => SelectedAppointmentCopy.Color.Name;
        set => SelectedAppointmentCopy.Color = Color.FromName(value);
    }

    private IEnumerable<Appointment> SelectedAppointments;

    protected override void OnInitialized()
    {
        Appointments.ForEach(x =>
        {
            x.Color = RandomColor(new Random(x.GetHashCode()));
        });
        base.OnInitialized();
    }

    private async Task EditAppointment(Appointment appointment, bool enableDelete = true)
    {
        EnableDelete = enableDelete;
        SelectedAppointment = appointment;
        SelectedAppointmentCopy = SelectedAppointment.Copy();
        StateHasChanged();
        while (SelectedAppointment is not null)
        {
            await Task.Delay(50);
        }
    }

    private void CloseAppointment()
    {
        SelectedAppointment = null;
        StateHasChanged();
    }
    private void DeleteAppointment()
    {
        Appointments.Remove(SelectedAppointment);
        CloseAppointment();
    }
    private void SaveAppointment()
    {
        SelectedAppointment.Title = SelectedAppointmentCopy.Title;
        SelectedAppointment.Start = SelectedAppointmentCopy.Start;
        SelectedAppointment.End = SelectedAppointmentCopy.End;
        SelectedAppointment.Color = SelectedAppointmentCopy.Color;
        if (!Appointments.Contains(SelectedAppointment)) {
            Appointments.Add(SelectedAppointment);
        }
        CloseAppointment();
    }

    private async Task OnAddNewAppointment(Appointment appointment)
    {
        (PopupX, PopupY) = ("50%", "50%");
        await EditAppointment(appointment, false);
    }
    private async Task OnAppointmentClick(Appointment appointment, MouseEventArgs mouse)
    {
        (PopupX, PopupY) = ($"{mouse.ClientX}px", $"{mouse.ClientY}px");
        await EditAppointment(appointment);
    }
    private Task OnOverflowAppointmentClick(IEnumerable<Appointment> appointments, MouseEventArgs mouse)
    {
        (PopupX, PopupY) = ($"{mouse.ClientX}px", $"{mouse.ClientY}px");
        SelectedAppointments = appointments;
        StateHasChanged();

        return Task.CompletedTask;
    }

    // helper methods
    private Color RandomColor(Random r)
    {
        return Color.FromArgb(r.Next(0, 255), r.Next(0, 255), r.Next(0, 255));
    }
    private string ToRgbString(Color color)
    {
        return $"rgb({color.R}, {color.G}, {color.B})";
    }

    private class Appointment : IAppointment
    {
        public string Title { get; set; }
		public DateTime Start { get; set; }
		public DateTime End { get; set; }
		public Color Color { get; set; }

        public Appointment Copy() => this.MemberwiseClone() as Appointment;
    }
}
